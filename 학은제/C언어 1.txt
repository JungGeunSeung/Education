1강. C언어의 이해와 컴파일러 설치
1. 프로그램이란 컴퓨터가 실행하는 일련의 명령어들의 집합니다.
2. 프로그래밍 언어는 종류가 다양하며, 개발하는 프로그램의 목적이나 용도에 따라 적절한 프로그래밍 언어를 선택한다.
3. 프로그래밍 언어의 종류에는 기계어, 어셈블리어, 고급언어가 있다.
4. C언어로 프로그래밍하는 과정 : 소스프로그램(~.c) 작성 → 컴파일러가 기계어로 번역하여 목적 프로그램(~.obj)을 생성 → 링커가 라이브러리와 연결하여 실행파일(~.exe)을 생성
5. 통합개발환경이란 소스 프로그램 작성은 물론 컴파일링과 링킹 및 디버깅을 수행할 수 있게도와주는 소프트웨어이다.

2강. C프로그래밍 시작하기
1. 비주얼 스튜디오(Visual Studio)에서 C프로그래밍은 C++, 윈도우기반, 콘솔 프로그램 방식으로 프로젝트를 생성하고, 소스파일 폴더 안에 확장자가 c인 파일을 만들어서 코딩한다.
2. C 소스 프로그램(source program)을 작성하고 난 후, 컴파일과 링킹 과정을 거쳐서 실행결과를 확인할 수 있다
3. 가장 기본이 되는 C 프로그램은 다음과 같은 기본 구조를 갖는다.
#include ＜stdio.h＞
int main(void) {
// 여기에 명령어를 입력한다.
return 0;
}

3강. C 프로그램의 구성요소와 변수
1. # : 선행처리 지시자
2. include ＜stdio.h＞ : 표준입출력 헤더파일을 포함시킨다는 의미
3. main() 함수 : C언어 파일에 하나만 존재하는 함수로서, 제일 먼저 호출되어 실행되는 함
4. 함수는 { 로 시작해서 } 로 끝난다.
5. 여러 줄 주석은 /* 와 */ 사이에 내용을 입력하면 되고, 한줄 주석은 // 오른쪽에 내용을 입력하면 된다.
6. return 0; : 함수의 값을 외부로 돌려보내는 문장
7. 변수는 메모리상의 저장 공간을 나타내는 이름으로서 저장되는 값이 바뀔 수 있고, 상수는 변함없는 데이터 값을 의미한다.

4강. 정수 표현 방식과 실수 표현 방식
1. C언어의 자료형은 정수형, 실수형, 문자형으로 분류된다.
2. 정수형 short int의 크기는 2byte, int는 4byte, long int는 4byte이고, 실수형 float의 크기는 4byte, double은 8byte이다.
3. 2의 보수 방식으로 음수를 표현하고, 부동소수점 방식으로 실수를 표현한다.
4. 데이터형의 표현범위를 알고 오버플로우나 언더플로우가 발생하지 않도록 프로그래밍 해야 한다.

5강. 문자형과 자료형 변환
1. 모든 문자 상수는 아스키 코드 값으로 바뀌어 숫자로 저장되고 연산된다.
2. 문자형 변수는 char형을 사용하여 선언하며 문자형 상수는 작은 따옴표로 묶어서 표현한다.
3. 제어문자는 인쇄 목적이 아니라 제어 목적으로 사용되는 문자들로서 줄바꿈 문자, 탭 문자, 벨소리 문자, 백스페이스 문자 등이 있다.
4. 자동 자료형 변환은 서로 다른 자료형의 혼합 연산을 하면 기억장소의 크기가 작은 쪽에서 큰 쪽으로 자동으로 확장되어 변환된다.
5. 강제 자료형 변환(명시적 자료형 변환) 방법은 프로그래머가 강제로 지정되어 있는 변수의 자료형을 변환하는 방법으로서 캐스트 연산자를 사용한다. 캐스트 연산자는 “(자료형) 변수” 와 같은 형태로 사용한다.
6. 기호상수는 상수 값에 이름을 정해놓고 사용하는 것으로서, 일괄적인 수정이 쉽다는 장점이 있으며 변수와는 달리 정의된 값을 수정할 수 없다.
7. 열거형은 단순히 1, 2, 3, 4, … 와 같은 숫자를 기호로 표현한 것으로서, 의미를 보다 명확히 전달할 수 있다.

6강. printf() 함수와 scanf() 함수
1. printf( ) 함수는 표준 출력 함수로서 큰따옴표(“ ”) 안에 있는 내용을 화면에 출력한다. 큰따옴표 안에 출력형식 지정자를 이용하여 다양한 형식으로 출력이 가능하다.
2. 정수를 자릿수를 지정하여 출력할 경우, %로 시작하고 확보할 자릿수와 데이터 형식 지정자를 순서대로 적어주면 된다. 실수를 자릿수를 지정하여 출력할 경우, % 기호로 시작하고, 확보할 출력 공간과 소수점 이하 자릿수를 마침표(.)를 사이에 두고 적어준다. 그리고 출력할 데이터 형식 지정자를 적어주면 된다.
3. scanf() 함수는 표준 입력 함수로서, 키보드로부터 값을 받아서 변수에 저장시킨다. 변수의 주소를 얻기 위하여 변수 앞에 ＆를 붙인다.
4. %c 변환 문자는 화이트 스페이스(공백 문자, 탭 문자, 개행 문자)도 입력한다. %c 앞에 공백을 사용하면 화이트 스페이스를 입력에서 제외시킬 수 있다.

7강. 수식과 연산자 1
1. 수식 : 상수, 변수, 그리고 연산자의 조합으로 표현하며, 연산자와 피연산자로 구성된다.
2. 산술 연산자
: +, -, *, /, %(나머지 연산자)
: 이항 연산자
3. 대입 연산자(할당 연산자) : 오른쪽의 값이나 수식의 결과를 왼쪽 변수에 저장
4. 복합대입 연산자
: 대입연산자 =와 산술연산자를 합쳐 놓은 연산자
: +=, -=, *=, /=, %=
5. 관계 연산자
: ==(같다), !=(같지 않다), ＞=, ＜=, ＞, ＜
: 이항 연산자
: 연산의 결과가 참 또는 거짓

8강. 수식과 연산자 2
1. 논리 연산자
: ＆＆(and), ||(or), !(not)
: 산술식, 관계식, 논리식의 조합
: 연산 결과가 참 또는 거짓
2. 조건 연산자
: 유일한 삼항 연산자
: (조건식)? 조건식이 참일 때 값 : 조건식이 거짓일 때 값 ;
3. 비트 연산자
: ＆(and), |(or), ~(not), ^(xor), ＜＜(왼쪽 쉬프트), ＞＞(오른쪽 쉬프트)
: 비트 or 연산에서 0을 마스크로 사용하면 대상 비트 값을 그대로 통과시킨다.
: 비트 or 연산에서 1을 마스크로 사용하면 대상비트 값을 모두 1로 만든다.
: 비트 and 연산에서 0을 마스크로 사용하면 대상 비트 값을 모두 0으로 만든다.
: 비트 and 연산에서 1을 마스크로 사용하면 대상 비트 값을 그대로 통과시킨다.
4. 연산자 우선순위
: 괄호 연산자는 가장 우선순위가 높다.
: 대입 연산자 ＜ 논리 연산자 ＜ 관계 연산자 ＜ 산술 연산자
: 이항 연산자 ＜ 단항 연산자

9강. if문 if ~ else문
1. 조건문 if : 조건식이 참일 경우 문장을 수행한다.
if (조건식) 문장;
2. 조건문 if~else : 조건식이 참일 경우 문장1을 수행하고, 조건식이 거짓일 경우 문장2를 수행한다.
if (조건식) 문장1; else 문장2;
(1) if나 else 다음에 수행할 문장들이 여러 개일 경우엔 중괄호를 이용하여 블록을 만들어준다.

10강. 중첩 if문과 다중분기 조건문 switch
1. 중첩 if : if문 안에 if문이 들어가 있는 상태의 조건문으로서 조건식1이 참일 경우 조건식2를 검사하는 방식으로 실행한다.
if (조건식 1)
	if (조건식 2)
	   문장1;
	else
	   문장2;
else
   문장 3;
(1) 여러 개의 if와 else가 있을 경우, else는 가장 가까운 if와 쌍을 이룬다.
(2) (2)번 규칙과 다른 제어를 원할 경우엔, 중괄호( { })를 이용하여 블록을 만들어서 제어의 흐름을 조정한다.
2. 조건문 if ~ else if ~ else : if~else를 연속해서 작성하는 형태로서 조건식1이 참일 경우 문장1을 수행하고, 조건식1이 거짓이면서 조건식2가 참일 경우 명령2를 수행하는 방식이다. 마지막 else에는 앞에 기술된 조건들이 모두 거짓일 경우 수행할 문장을 적는다.
if (조건식1)
	문장 1;
else if (조건식2)
	문장2;
	  :
else
	문장n;

3. 다중 분기문 switch : 조건식의 결과가 참과 거짓으로만 판명되지 않고 여러 경우로 분기되는 경우에 적합한 문장이다.
switch(조건식) {
	case 값1 : 문장들 ;
		     break;
	   :
	case 값n : default : 문장들 ;
		     break;
(1) 조건식의 결과는 반듯이 정수이어야 한다.
(2) 조건식의 결과 값에 따라 여러 경우로 분기시켜서 해당 문장들을 수행할 수 있다. case마다 수행할 문장 마지막에 꼭 break문을 넣어서 해당 case를 수행한 후 switch 문을 빠져나갈 수 있게 해줘야 한다.
