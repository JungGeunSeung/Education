1강. 자료구조의 개요 및 자료표현 방법
1. 자료구조는 자료의 효율적인 접근 및 수정을 가능하도록 자료의 조직, 관리, 저장하는 일련의 작업이다.
2. 프로그램은 데이터를 표한하고, 표현된 데이터를 처리하는 것으로 추상적인 형태의 알고리즘을 컴퓨터가 수행할 수 있도록 구체화한 결과물이다.
3. 보수란 컴퓨터가 기본적으로 수행하는 덧셈 연산을 이용하여 뺄셈을 수행하기 위해 사용된다.
4. 디지털 시스템에서의 숫자, 문자, 그림, 소리, 기호 등 모든 형식의 자료는 물리적 단위(2진수 코드)로 표현하여 저장 및 처리한다.
5. 코드는 문자에 대한 2진 코드를 정의해 놓은 문자코드로서 컴퓨터 내부에서는 문자 자료도 1과 0의 2진수 조합으로 표현된다.
6. 부분 문자열을 구분하여 저장하는 방법에는 부분 문자열 사이에 구분자를 사용하여 저장하거나, 가장 긴 문자열의 길이에 맞춰 고정 길이로 저장하는 방법, 그리고 부분 문자열을 연속하여 저장하고 각 부분 문자열에 대한 포인터를 사용하는 세 가지가 있다.

2강. 추상 자료형과 알고리즘
1. 추상화는 크고 복잡한 자료, 모듈, 시스템 등으로부터 불필요한 부분을 생략하고 객체의 속성 중 가장 중요한 것에만 중점을 두어 모델화한 것이다.
2. 자료 추상화는 데이터의 객체의 명세와 구현을 분리하는 것으로 추상화를 통해 코드의 복잡성을 줄일 수 있으며 데이터적인 측면(자료형)과 기능적인 측면(연산)으로 분리 정의하여 자료에 대한 조작을 효과적으로 수행할 수 있는 수단을 제공한다.
3. 추상 자료형은 자료 및 연산을 모두 하나의 단위로 묶어 자료형에 속하는 값들의 집합을 고려한 후 적용 가능한 연산들을 정의해가면서 자료와 연산자의 특성을 논리적으로 추상화하여 정의한 자료형이다.
4. 알고리즘은 어떤 문제를 해결할 때 그 절차나 방법을 알기 쉽도록 기술하는 논리적인 절차로서 프로그램 작성을 통해 컴퓨터에서 수행 가능해야 한다.
5. 알고리즘을 분석하는 이유는 적용 가능한 여러 알고리즘들을 서로 비교 분석함으로써 최적의 알고리즘 선택하는데 있다.

3강. 선형 리스트와 배열
1. 리스트, 스택, 큐와 같은 선형구조와 트리, 그래프와 같은 비선형구조는 프로그램으로 구현하는 방식에 따라 순차 자료구조와 연결 자료구조로 나눌 수 있다.
2. 순차 자료구조는 구현할 자료들을 논리적인 순서대로 메모리에 연속하여 저장하는 구현 방식이다. 따라서 순차 자료구조는 논리적인 순서와 물리적인 순서가 항상 일치해야 한다.
3. 일반적으로 순차 자료구조는 배열을 통해 구현하고, 연결 자료구조의 경우는 포인터 개념을 이용하여 구현할 수 있다.
4. 선형리스트(순차리스트)는 자료를 구조화하는 가장 기본적인 방법으로서 자료를 나열한 목록 또는 자료들 간에 순서를 갖는 리스트이다.
5. 선형리스트의 삭제/삽입 시 원소들의 순서를 만족하기 위해 후속 원소들을 한 자리씩 전후로 이동해야 한다.
6. 배열은 동일한 자료형(기본 자료형, 구조체, 포인터 등)들이 ＜색인, 원소＞의 순서쌍으로 집단화한 선형 자료구조(순차적 저장, 유한 집합)이다.

4강. 구조체와 범용리스트
1. 구조체는 프로그램으로 하나 이상의 변수를 그룹지어서 새로운 자료형(복잡한 데이터 표현)을 정의하는 것으로 구조체를
2. 범용 리스트는 유한개의 순서가 있는 노드 또는 리스트들로 구성된 집합으로 다변수로 구성된 다항식의 표현, 희소행렬 표현 등에 활용할 수 있다.
3. 다항식을 배열로 표현할 때 degree〈(0이 아닌 항의 수)×2이면 1차원 배열로, degree〉(0이 아닌 항의 수)×2일 경우는 다항식의 각 항에 대한 〈지수, 계수〉의 쌍을 2차원 배열에 저장하는 것이 좋다.
4. 희소행렬은 행렬 원소의 값 중에서 “0”의 값을 비교적 많이 가지는 행렬로 2차원 배열로 나타낼 때 기억공간의 낭비가 심하기 때문에 희소하지 않은 배열(3원소 쌍)로 표현하여 행렬 연산을 하는 것이 좋다.

5강. 순환
1. 프로그래밍 언어에서 함수는 하나의 특별한 목적의 작업을 수행하기 위해 독립적으로 설계된 코드의 모임으로 하나의 프로그램 단위를 의미한다.
2. 순환함수(재귀함수)는 자기 자신을 반복적으로 호출하여 수행하는 방식을 통해 주어진 문제를 해결하는 함수(알고리즘)를 말한다.
3. Memoization 기법은 프로그램이 동일한 계산을 반복해야 할 때, 이전에 계산한 값을 메모리에 저장함으로써 동일한 계산의 반복 수행을 제거하여 프로그램 실행속도를 빠르게 하는 기술이다.
4. 백트래킹 알고리즘은 문제를 해결하는 과정에서 고려할 수 있는 모든 경우의 수를 모두 탐색해보는 일반적인 알고리즘 기법으로 탐색 과정에서 해를 찾는 도중 해가 아니면 되돌아가서 다시 해를 찾아가는 기법이다.

6강. 스택 1
1. 스택은 후입선출(LIFO: Last-In-First-Out) 프로토콜을 구현하는 자료구조로 스택의 삽입/삭제 위치를 알려주는 포인터(top)가 있어야 하며, 삽입 시에는 포인터를 먼저 증가(top=top+1)한 후 삽입이 이루어진다. 반면에 삭제는 원소 값을 삭제한 후 포인터를 감소(top=top-1)하여야 한다.
2. 스택 응용의 한 예로 시스템 스택은 기억공간의 데이터들을 효율적으로 관리하기 위한 데이터 참조 방식의 자료구조이며 프로그램 실행 시 시스템이 사용하는 대표적인 기억공간으로서 함수간의 호출과 복귀에 따른 실행순서 관리를 제어하기 위해 사용된다.

7강. 스택 2
1. 스택은 산술식 변환이나 평가에 활용할 수 있다.
2. 다중 스택은 여러 개의 스택을 운용하는 경우로서 일반적으로 스택의 오버플로우 발생을 방지하기 위해 사용되는 자료구조이다.
3. 단일 스택은 오버플로우 발생 시 실제 작업에 필요한 자료를 사용할 수 없으며, 중간에 작업을 중단하고 배열의 크기를 다시 재 선언해야 한다.
4. 다중 스택은 오버플로우 발생 시 스택의 많은 요소들이 이동 및 재배열되어야 하는 문제점(repacking 작업)이 있으며 비순차표현(연결구조)으로 구현하여 해결할 수 있다.

8강. 큐 1
1. 큐는 입장권을 구입하기 위해 기다리는 사람들의 줄과 같이 선입선출(FIFO: irst-In-First-Out) 또는 후입후출(LILO: Last-In-Last-Out) 프로토콜을 구현하는 자료구조이다.
2. 큐는 삽입 시 rear, 삭제 시 front를 통해 연산이 이루어진다.
3. 이동큐는 선형큐의 삽입/삭제 시 포화상태의 잘못된 인식의 문제점을 해결할 수 있지만 저장된 원소들을 앞부분으로 이동하는 오버헤드가 발생한다.
4. 환형큐는 이동큐의 시간 지연의 문제점을 해결하기 위한 자료구조로서 1차원 배열로 구성된 큐를 시계방향으로 두 개의 포인터가 이동하는 환형으로 생각하여 원소들을 삽입/삭제할 수 있는 구조이다.

9강. 큐 2
1. 큐는 선입선출 형태로 동작하기 때문에 컴퓨터 운영체제에서 실행을 요청한 작업들을 순서대로 처리하기 위한 프로세스 스케줄링, 최적의 시스템을 설계하기 위한 시뮬레이션에서 대기행렬 등 직간접적으로 다양한 분야에 응용할 수 있다.
2. 조건 없이 선입선출 형태로 동작하는 일반적인 큐와 다르게 우선순위 큐는 삽입된 순서와 상관없이 일정한 순서(우선순위 값)에 의해 삭제되는 자료구조로서 각각의 우선순위에 따라 여러 개의 큐로 구성할 수 있다.
3. 데크는 큐 2개를 반대로 붙여서 만든 자료구조로 큐와 스택의 중간 정도의 특징을 가지고 있는 자료구조이다.

10강. 연결구조 1
1. 연결리스트는 순차 자료구조에서 배열의 연산시간에 대한 문제와 저장공간에 대한 문제를 개선하여 자료를 표현한 방법으로 자료의 논리적인 순서와 물리적인 순서가 일치하지 않는 자료구조이다.
2. 연결리스트는 데이터와 연결(link) 정보를 저장하기 위한 기억공간이 필요하다.
3. 단일 연결리스트의 노드는 데이터 필드와 1개의 연결 필드로 구성되고 노드가 하나의 연결 필드에 의해서 다음 노드와 연결되는 구조를 가진다.

11강. 연결구조 2
1. 환형 연결리스트는 단일 연결리스트의 제한성(어떤 특정 노드의 선행 노드를 찾기 위해 head부터 시작)을 해결하기 위한 자료구조로 마지막 노드의 연결필드가 NULL이 아닌 첫 번째 노드의 주소를 가진다.
2. 이중 연결리스트는 하나의 노드에 한 개 이상의 연결필드(임의 노드를 중심으로 전위/후위 노드의 위치에 대한 포인터)를 가진 자료구조로 리스트를 양방향으로 이동할 수 있기 때문에 노드의 삽입/삭제가 편리하다.
3. 환형 이중 연결리스트는 특별한 헤드 노드를 가지며 헤드 노드(데이터 필드는 정보를 갖지 않음)는 환형리스트 상에 항상 존재하게 되므로 공백리스트 일지라도 실제로는 하나의 노드를 반드시 가지는 자료구조이다.

12강. 연결구조 응용
1. 배열을 이용한 다항식 구현은 배열의 크기가 미리 정해지기 때문에 기억공간의 낭비와 유연성이 부족하다. 반면에 연결구조를 사용함으로써 데이터를 추가할 때마다 기억공간을 동적으로 할당하기 때문에 기억공간의 낭비를 최소화할 수 있다.
2. 연결구조를 이용하여 희소행렬을 구현할 경우 임의의 원소의 대한 접근은 연결을 따라가야 하기 때문에 배열을 이용하여 구현한 경우보다 느리지만 0이 아닌 원소들만 표현하기 때문에 기억공간을 절약할 수 있다. 즉, 희소행렬을 연결리스트로 표현하는 경우 순차적 방법에서의 단점을 극복할 수 있으며, 특히 희소행렬의 크기가 고정되지 않고 형태가 변하는 경우에 효율적으로 이용할 수 있다.
3. 희소행렬의 연결리스트 표현은 희소행렬의 각 열과 행을 헤더 노드가 있는 환형 연결리스트로 표현하여 나타낼 수 있다.
4. 연결스택과 연결큐는 연결리스트를 이용하여 구현한 스택과 큐로서 크기가 제한되지 않는 면에서는 좋지만 구현이 복잡하고 삽입이나 삭제 시간이 소요되는 특징이 있다.

13강. 트리 구조 1
1. 트리는 근으로부터 하위계층으로 연결되어 가는 노드들로 구성된 계층적 자료구조 또는 원소들 간에 1:多 관계를 가지는 비선형 자료구조를 의미한다.
2. 이진트리는 트리의 노드 구조를 일정하게 정의하여 트리의 구현과 연산이 쉽도록 정의한 트리로서 공집합이거나 x가 근노드이고 L과 R은 둘 중 어떤 것도 x를 포함하지 않는 서로 분리된 이진트리일 때 삼원소 쌍 (x, L, R)을 의미한다. 따라서 이진트리의 모든 노드는 왼쪽 자식노드와 오른쪽 자식노드만을 가진다.
3. 포화 이진트리는 모든 레벨에 노드가 포화상태로 차 있는 이진트리이고 완전 이진트리는 깊이가 k인 이진트리에 차례대로 붙인 1부터 n까지의 번호에 노드들이 1대1로 대응하는 트리를 말한다.
4. 이진트리는 1차원 배열의 순차 자료구조 또는 세 개의 필드(data, lchild, rchild)를 갖는 노드로 구성한 연결구조를 이용하여 표현할 수 있다.

14강. 트리 구조 2
1. 이진트리 운행(순회)은 이진트리를 구성하는 모든 노드를 오직 한번만 방문하는 연산을 말한다. 이진트리의 근노드에서 시작해서, 현재 노드를 방문하는 것, 왼쪽 자식 노드를 순회하는 것과 오른쪽 자식 노드를 순회하는 것에 따라 전위 운행, 중위 운행, 후위 운행 방법이 있다.
2. 일반트리를 이진트리로 변환하는 이유는 일반트리에 대해 가변크기와 고정크기의 노드를 사용함으로써 발생하는 프로그램 구현의 복잡성, 기억공간의 낭비를 해결하기 위한 것이다. 이진트리로 변환하는 경우 연결 필드 중에서 1/2 정도만 null 연결을 차지함으로써 기억공간을 절약할 수 있다.
3. 수식트리는 이진트리의 응용 예로서 수식을 표현하는데 사용하는 트리로서 수식 이진트리라고도 한다. 피연산자는 잎노드에, 연산자는 비단말노드(중간노드)에 위치하며 왼쪽 부분트리는 왼쪽 피연산자를, 오른쪽 부분트리는 오른쪽 피연산자를 표현한다.
4. 스레드 이진트리는 이진트리의 한 종류로 모든 오른쪽 널 포인터를 중위 후속자 노드로 연결하고, 모든 왼쪽 널 포인터를 중위 선행자 노드로 연결한 것을 말하며, 재귀적인 중위 순회를 빠르게 할 수 있는 방법으로 사용되는 자료구조이다. 즉, 이진트리를 탐색하기 위해 스택을 사용하지 않고 스레드를 이용하여 순차적으로 탐색할 수 있는 장점이 있다.



